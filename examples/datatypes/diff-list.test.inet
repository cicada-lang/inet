* (diff) front -- back value!
* (diff-append) rest target! -- result
* (diff-open) new-back target! -- old-back

( plug the front of the `target` to the back of `rest` )

! (diff)-(diff-append)
  (diff)-front diff result-(diff-append)
  (diff-append)-rest diff-open back-(diff)

! (diff)-(diff-open)
  (diff)-back new-back-(diff-open)
  (diff)-front old-back-(diff-open)

( list.inet )

* (null) -- value!
* (cons) tail head -- value!
* (append) rest target! -- result

! (null)-(append)
  (append)-rest result-(append)

! (cons)-(append)
  (append)-rest (cons)-tail append
  (cons)-head cons result-(append)

( test )

* (sole) -- value!

= sole-diff-list
  @wire/pair
  ( wire wire ) diff
  ( front back value ) @swap
  ( front value back ) sole cons sole cons
  ( front value list ) @rot
  ( value list front ) @wire/connect
  ( value )

. sole-diff-list sole-diff-list diff-append

  @wire/print-net
  @interact
  @wire/print-net
